(define (domain mec)
    (:requirements
    :typing
    :strips)
    
    (:types
    margem
    barco
    canibal
    missionario)
    
    (:predicates 
    
    (at-boat ?m - margem)
    (atM ?mi - missionario ?m - margem)
    (atC ?c - canibal ?m - margem)
    (free ?b - barco)
    (carryM ?mi - missionario ?b - barco)
    (carryC ?c - canibal ?b - barco) 
    
    )
    
      (:action mudaMargem
    :parameters(?m1 ?m2 - margem ?b1 ?b2 - barco)
    :precondition(and(at-boat ?m1) (or (not(free ?b1)) (not(free ?b2))) ) 
    :effect(and (not(at-boat ?m1)) (at-boat ?m2))
    )

    
     (:action embarqueUmCanibal
    :parameters(?c - canibal ?b - barco ?m - margem)
    :precondition(and(free ?b) (at-boat ?m) (atC ?c ?m)  )
    :effect(and(not(free ?b)) (carryC ?c ?b) (not(atC ?c ?m)))  
    )
     (:action embarqueUmMissionario
    :parameters(?mi - missionario ?b - barco ?m - margem)
    :precondition(and(free ?b) (at-boat ?m) (atM ?mi ?m)  )
    :effect(and(not(free ?b)) (carryM ?mi ?b) (not(atM ?mi ?m)))
    )
     (:action desembarqueUmCanibal
    :parameters(?c - canibal ?b - barco ?m - margem)
    :precondition(and(not(free ?b)) (at-boat ?m)  )
    :effect(and (free ?b) (atC ?c ?m) (not(carryC ?c ?b))) 
    )
    
     (:action desembarqueUmMissionario
    :parameters(?mi - missionario ?b - barco ?m - margem)
    :precondition(and(not(free ?b)) (at-boat ?m) )
    :effect(and (free ?b)  (atM ?mi ?m) (not(carryM ?mi ?b))) 
    )
   
    
    )
    
    
  